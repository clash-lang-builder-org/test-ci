[ { "BlackBox" :
    { "name"      : "GHC.Classes.eqInt"
    , "kind"      : "Expression"
    , "type"      : "eqInt :: Int -> Int -> Bool"
    , "template"  : "~ARG[0] = ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Classes.neInt"
    , "kind"      : "Expression"
    , "type"      : "neInt :: Int -> Int -> Bool"
    , "template"  : "~ARG[0] /= ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Classes.&&"
    , "kind"      : "Expression"
    , "type"      : "(&&) :: Bool -> Bool -> Bool"
    , "template"  : "~ARG[0] and ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Classes.||"
    , "kind"      : "Expression"
    , "type"      : "(::) :: Bool -> Bool -> Bool"
    , "template"  : "~ARG[0] or ~ARG[1]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Classes.not"
    , "kind"      : "Expression"
    , "type"      : "not :: Bool -> Bool"
    , "template"  : "not ~ARG[0]"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Classes.divInt#"
    , "kind"      : "Declaration"
    , "type"      : "divInt# :: Int# -> Int# -> Int#"
    , "template"  :
"-- divInt begin
~GENSYM[divInt][0] : block
  signal ~GENSYM[quot_res][1] : ~TYP[1];
begin
  ~SYM[1] <= ~ARG[0] / ~ARG[1];
  ~RESULT <= ~SYM[1] - 1 when ((~ARG[0] = abs ~ARG[0]) /= (~ARG[1] = abs ~ARG[1])) else
             ~SYM[1];
end block;
-- divInt end"
    }
  }
, { "BlackBox" :
    { "name"      : "GHC.Classes.modInt#"
    , "kind"      : "Expression"
    , "type"      : "modInt# :: Int# -> Int# -> Int#"
    , "template"  : "~ARG[0] mod ~ARG[1]"
    }
  }
]
